---
layout: post
title:  "QuantLib Options and Derivatives pricing (C++)"
date:   2022-05-12 14:34:25
categories: jekyll update
tags: 
image: /assets/article_images/2022-05-12-QuantLib/QuantLib.jpg
---

## Various Stochastic Models used in Options Theory.

The QuantLib project is a open-source software that prioritizes comprehensive software framework for quantitative finance. The user can donwload the QuantLib project and have access to a library for modeling, trading, and risk management in real-time. QuantLib is written in C++ with clean object programming using design patterns such as creational, behavioral, and strucutural.

  * Students can master the library that is used in the real world and contribute to it in a meaningful way.
  * Researchers can have a framework at hand which vastly reduces the amount of low-level work necessary to build models.
  * Ability to have a sustainable framework for pricing and risk management orices.

My research for QuantLib is primarily using the Equity models to price derivatives such as eurpoean options and american options. Other models such as credit derivatives include convertible bonds and floating interes rate bonds.

### Equity Options

#### Example 1: Black-Scholes European Option.
The Black-Scholes-Merton is a pricing model used for financial instruments. It is primarily used in stock option valuation by determining the valuation of an asset (call option) with six variables: volatility, type, underlying stock price, strike price, and risk-free rate. Below is the example we use to demonstrate the principle of hedging to eliminate risk. The Black-Scholes model is eesentially a second order partial differential equation:

<img width="501" alt= src="https://user-images.githubusercontent.com/75659218/213034548-30dbf9a4-3776-468c-aa68-2a993552a08d.png">
Where we price the call option:

<img width="518" alt= src="https://user-images.githubusercontent.com/75659218/213034693-584f636f-8558-46c8-9682-ccc69893509c.png">



Assume we are purchasing a European call option for TSLA with a strike price $14.38 maturing on May 15th, 2016. Assume the spot price $12.80, the volatility is 20%, and dividend yield of 1.63%. Short term risk free 0.01%. We shall value this option October 5, 2015.
![image](https://user-images.githubusercontent.com/75659218/212205215-49871f6b-7335-48c0-95d1-d527502ff7c5.png)
We see that the theoretical price of the option is 0.24 using the AnalyticEuropeanEngine().

#### C++ Implementation.
    #include <ql/qldefines.hpp>
    #if !defined(BOOST_ALL_NO_LIB) && defined(BOOST_MSVC)
    #  include <ql/auto_link.hpp>
    #endif
    #include <ql/instruments/vanillaoption.hpp>
    #include <ql/pricingengines/vanilla/analyticeuropeanengine.hpp>
    #include <ql/pricingengines/vanilla/analyticeuropeanvasicekengine.hpp>
    #include <ql/pricingengines/vanilla/analytichestonengine.hpp>
    #include <ql/pricingengines/vanilla/binomialengine.hpp>
    #include <ql/pricingengines/vanilla/fdblackscholesvanillaengine.hpp>

    #include <ql/time/calendars/target.hpp>
    #include <ql/utilities/dataformatters.hpp>
    #include <iostream>
    #include <iomanip>

    using namespace QuantLib;

    int main(int, char* []) {

        try {

                std::cout << std::endl;

                // set up dates
                Calendar calendar = TARGET();
                Date todaysDate(15, May, 2016);
                Date settlementDate(8, October, 2015);
                Settings::instance().evaluationDate() = todaysDate;

                // our options
                Option::Type type(Option::Put);
                Real underlying = 12.80;
                Real strike = 14.38;
                Spread dividendYield = 0.00;
                Rate riskFreeRate = 0.001;
                Volatility volatility = 0.20;
                Date maturity(15, May, 2016);
                DayCounter dayCounter = Actual365Fixed();

                std::cout << "Option type = "  << type << std::endl;
                std::cout << "Maturity = "        << maturity << std::endl;
                std::cout << "Underlying price = "        << underlying << std::endl;
                std::cout << "Strike = "                  << strike << std::endl;
                std::cout << "Risk-free interest rate = " << io::rate(riskFreeRate)
                          << std::endl;
                std::cout << "Dividend yield = " << io::rate(dividendYield)
                          << std::endl;
                std::cout << "Volatility = " << io::volatility(volatility)
                          << std::endl;
                std::cout << std::endl;
                std::string method;
                std::cout << std::endl ;
                
                // options
                VanillaOption europeanOption(payoff, europeanExercise);
                VanillaOption bermudanOption(payoff, bermudanExercise);
                VanillaOption americanOption(payoff, americanExercise);

                // Analytic formulas:

                // Black-Scholes for European
                method = "Black-Scholes";
                europeanOption.setPricingEngine(ext::shared_ptr<PricingEngine>(new AnalyticEuropeanEngine(bsmProcess)));
                std::cout << std::setw(widths[0]) << std::left << method
                          << std::fixed
                          << std::setw(widths[1]) << std::left << europeanOption.NPV()
                          << std::setw(widths[2]) << std::left << "N/A"
                          << std::setw(widths[3]) << std::left << "N/A"
                          << std::endl;


#### Example 2: Binomial Tree Model for TSLA European Option.
Let's use the information from above to construct a binomial tree.
![image](https://user-images.githubusercontent.com/75659218/212207366-9378679b-f997-4235-a8b0-0b1d1c2431eb.png)
We still use the information from above, however, we do use a function to create the binomial tree named binomial_price. The code snippet below shows the convergence of the binomial tree comapring the price and bsm process.
![image](https://user-images.githubusercontent.com/75659218/212207566-ba9b78a6-ffb8-4f92-baaa-75a1a7c709e8.png)
![image](https://user-images.githubusercontent.com/75659218/212207984-27a43160-9398-4546-9d35-66c0552fb382.png)

#### C++ Implementation:

        // Binomial method: Additive equiprobabilities
        method = "Additive equiprobabilities";
        europeanOption.setPricingEngine(ext::shared_ptr<PricingEngine>(
                new BinomialVanillaEngine<AdditiveEQPBinomialTree>(bsmProcess, timeSteps)));
        bermudanOption.setPricingEngine(ext::shared_ptr<PricingEngine>(
                new BinomialVanillaEngine<AdditiveEQPBinomialTree>(bsmProcess, timeSteps)));
        americanOption.setPricingEngine(ext::shared_ptr<PricingEngine>(
                new BinomialVanillaEngine<AdditiveEQPBinomialTree>(bsmProcess, timeSteps)));
        std::cout << std::setw(widths[0]) << std::left << method
                  << std::fixed
                  << std::setw(widths[1]) << std::left << europeanOption.NPV()
                  << std::setw(widths[2]) << std::left << bermudanOption.NPV()
                  << std::setw(widths[3]) << std::left << americanOption.NPV()
                  << std::endl;







